«IMPORT ecore»

«EXTENSION de::mdsdacp::template::extensions::DefaultComments»
«EXTENSION de::mdsdacp::template::extensions::PackageName»

«DEFINE root FOR EPackage»
	«EXPAND models FOREACH eClassifiers» 
«ENDDEFINE»

«DEFINE models FOR EClassifier»
	«FILE getPackagePath(ePackage.nsURI)+"/model/"+name.toFirstUpper()+".java"-»
		package «getPackageName(ePackage.nsURI)».model;
	
		import android.content.ContentValues;
		import android.database.Cursor;
		import «getPackageName(ePackage.nsURI)».database.tables.«name.toFirstUpper()»Table;
		
		/**
		 * Generated model class for usage in your application, defined by classifiers in ecore diagram
		 * 		
		 * «modifyWarningComment()»	 
		 */
		public class «name.toFirstUpper()»{
				
				private Long id;
			«FOREACH eContents.typeSelect(EAttribute) AS attr-»
				private «attr.eType.instanceClassName» «attr.name.toLowerCase()»;				
			«ENDFOREACH»	
		
				private final ContentValues values = new ContentValues();
			
				public «name.toFirstUpper()»() {
				}
							
				public «name.toFirstUpper()»(final Cursor cursor) {
					setId(cursor.getLong(cursor.getColumnIndex(«name.toFirstUpper()»Table.ID)));
					«FOREACH eContents.typeSelect(EAttribute) AS attr-»
						«IF(attr.eType.name.matches('EBoolean'))-»
					set«attr.name.toFirstUpper()»(cursor.isNull(cursor.getColumnIndex(«name.toFirstUpper()»Table.«attr.name.toUpperCase()»)) ? false : («EXPAND createContentValuesSetter FOR attr»(cursor.getColumnIndex(«name.toFirstUpper()»Table.«attr.name.toUpperCase()»)) != 0));
						«ELSEIF(attr.eType.name.matches('EBooleanObject'))-»
					set«attr.name.toFirstUpper()»(cursor.isNull(cursor.getColumnIndex(«name.toFirstUpper()»Table.«attr.name.toUpperCase()»)) ? false : («EXPAND createContentValuesSetter FOR attr»(cursor.getColumnIndex(«name.toFirstUpper()»Table.«attr.name.toUpperCase()»)) != 0));
						«ELSE-»
					set«attr.name.toFirstUpper()»(«EXPAND createContentValuesSetter FOR attr»(cursor.getColumnIndex(«name.toFirstUpper()»Table.«attr.name.toUpperCase()»))); 
						«ENDIF-»								
					«ENDFOREACH»				
				}
			
			
				/**
	 			 * Set id
	 			 *
	 			 * @param id from type java.lang.Long
	 			 */
				public void setId(final Long id){
					this.id = id;
					this.values.put(«name.toFirstUpper()»Table.ID, id);
				}
				
	 			/**
				 * Get id
				 *
				 * @return id from type java.lang.Long				
				 */
				public Long getId(){
					return this.id;
				} 
				
			«FOREACH eContents.typeSelect(EAttribute) AS attr»
				/**
	 			 * Set «attr.name.toLowerCase()» and set content value
	 			 *
	 			 * @param «attr.name.toLowerCase()» from type «attr.eType.instanceClassName»
	 			 */
				public void set«attr.name.toFirstUpper()»(final «attr.eType.instanceClassName» «attr.name.toLowerCase()»){
					this.«attr.name.toLowerCase()» = «attr.name.toLowerCase()»;
					this.values.put(«name.toFirstUpper()»Table.«attr.name.toUpperCase()», «attr.name.toLowerCase()»);
				}
				
				/**
				 * Get «attr.name.toLowerCase()»
				 *
				 * @return «attr.name.toLowerCase()» from type «attr.eType.instanceClassName»				
				 */
				public «attr.eType.instanceClassName» get«attr.name.toFirstUpper()»(){
					return this.«attr.name.toLowerCase()»;
				}				
			«ENDFOREACH»
			
			/**
			 * Get ContentValues
			 *
			 * @return id from type android.content.ContentValues with the values of this object				
			 */				
			public ContentValues getContentValues(){
				return this.values;
			}			
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE createContentValuesSetter FOR EAttribute-»
	«switch(eType.name){
		case 'EBigDecimal':
			'cursor.getInt'
		case 'EBigInteger':
			'cursor.getInt'
		case 'ELong': 
			'cursor.getLong'
		case 'ELongObject': 
			'cursor.getLong'
		case 'ELongObject': 
			'cursor.getLong'
		case 'ELongObject': 
			'cursor.getLong'
		case 'EByteObject': 
			'cursor.getInt'
		case 'EByte': 
			'cursor.getInt'					
		case 'EInt': 
			'cursor.getInt'
		case 'EIntegerObject': 
			'cursor.getInt'
		case 'EShort': 
			'cursor.getShort'
		case 'EShortObject': 
			'cursor.getShort'
		case 'EDate':
			'cursor.getString'
		case 'EBoolean':
			'cursor.getInt'
		case 'EBooleanObject':
			'cursor.getInt'
		case 'EDouble':
			'cursor.getDouble'
		case 'EDoubleObject':
			'cursor.getDouble'
		case 'EFloat':
			'cursor.getFloat'
		case 'EFloatObject':
			'cursor.getFloat'
		case 'EByteArray':
			'cursor.getBlob'
		default: 
			'cursor.getString'
	}-»
	 «REM»
	 Unsupported Ecore Types:
	 EEList<E>
	 EEnumerator<E>
	 ETreeIterator<E>
	 EInvocationTargetException
	 EResource
	 EResourceSet
	 EMap
	 EFeatureMap
	 EFeatureMapEntry
	 EDiagnosticChain
	 EJavaClass
	 Own types
	 EJavaObject
	 «ENDREM»
«ENDDEFINE»
