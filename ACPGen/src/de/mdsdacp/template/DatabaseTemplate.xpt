«IMPORT ecore»

«EXTENSION de::mdsdacp::template::extensions::DefaultComments»
«EXTENSION de::mdsdacp::template::extensions::Logic»
«EXTENSION de::mdsdacp::template::extensions::PackageName»

«DEFINE root FOR EPackage»
	«EXPAND findReferences FOREACH eClassifiers»
	«EXPAND database»
	«EXPAND tables FOREACH eClassifiers» 
	«clearRefernces()»
«ENDDEFINE»

«DEFINE findReferences FOR EClassifier»
	«FOREACH eContents.typeSelect(EReference) AS columns-»			
		«putReference(columns.eType.name.toString(),name)»						
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE tables FOR EClassifier»
	«FILE getPackagePath(ePackage.nsURI)+"/database/tables/"+name.toFirstUpper()+"Table.java"-»
		package «getPackageName(ePackage.nsURI)».database.tables;
		
		/**
		 * «tableComment()»				  
		 * «modifyWarningComment()»
		 */
		public interface «name.toFirstUpper()»Table {
			String TABLE_NAME = "«name.toLowerCase()»";
			
			String ID = "_id";
			«FOREACH eContents.typeSelect(EAttribute) AS columns-»
				String «columns.name.toUpperCase()» = "«columns.name.toLowerCase()»";				
			«ENDFOREACH-»								
			«FOREACH getReferences(name.toFirstUpper()) AS ref-»
				String «ref.toString().toUpperCase()»_ID = "«ref.toString().toLowerCase()»id";		
			«ENDFOREACH»						

			String[] ALL_COLUMNS = new String[] { ID «EXPAND allColumns»}; 			
						
			String SQL_CREATE = "CREATE TABLE " + TABLE_NAME + " ( " + ID + " INTEGER PRIMARY KEY AUTOINCREMENT"
			«EXPAND createTableAttributes FOREACH eContents.typeSelect(EAttribute)-»
			«EXPAND createTableAttributes FOREACH getReferences(name.toFirstUpper())-»+ " )";
			
			String SQL_INSERT = "INSERT INTO " + TABLE_NAME + " (" «EXPAND insertColumns»+") VALUES ( «EXPAND insertQuestionMarks» )";
			
			String SQL_DROP = "DROP TABLE IF EXISTS " + TABLE_NAME;
			
			String WHERE_ID_EQUALS = ID + "=?";
		}	
	«ENDFILE»
«ENDDEFINE»

«DEFINE allColumns FOR EClassifier»
	«FOREACH this.eContents.typeSelect(EAttribute) AS columns-»
	, «columns.name.toUpperCase()-»
	«ENDFOREACH-»
	«FOREACH getReferences(name.toFirstUpper()) AS ref-»
	, «ref.toString().toUpperCase()»_ID
	«ENDFOREACH-»	
«ENDDEFINE»

«DEFINE insertColumns FOR EClassifier»
	«FOREACH this.eContents.typeSelect(EAttribute) AS columns ITERATOR iter SEPARATOR  '+ "," +'-»
		«IF(iter.firstIteration)-»
			+
		«ENDIF-»
		«columns.name.toUpperCase()-»
	«ENDFOREACH-» 
	«FOREACH getReferences(name.toFirstUpper()) AS ref ITERATOR iter SEPARATOR  '+ "," +'-»
		«IF(iter.firstIteration)-»
			+
		«ENDIF-»
		«ref.toString().toUpperCase()-»_ID	
	«ENDFOREACH-»
«ENDDEFINE»

«DEFINE insertQuestionMarks FOR EClassifier-»
«FOREACH eContents.typeSelect(EAttribute) AS columns SEPARATOR ', '-»?«ENDFOREACH-»
«IF getReferences(name.toFirstUpper()).size>0-»
, «FOREACH getReferences(name.toFirstUpper()) AS columns SEPARATOR ', '-»?«ENDFOREACH-»
«ENDIF-»
«ENDDEFINE»

«DEFINE createTableAttributes FOR Object-»
	+"," + «this.toString().toUpperCase()»_ID + " INTEGER"
«ENDDEFINE»

«DEFINE createTableAttributes FOR EAttribute-»
	«switch(eType.name){
		case 'EBigDecimal':
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EBigInteger':
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'ELong': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'ELongObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'ELongObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'ELongObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EByteObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EByte': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'						
		case 'EInt': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EIntegerObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EShort': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EShortObject': 
			'+","+' + name.toUpperCase() + '+ " INTEGER"'
		case 'EDate':
			'+","+' + name.toUpperCase() + '+ " NUMERIC"'
		case 'EBoolean':
			'+","+' + name.toUpperCase() + '+ " NUMERIC"'
		case 'EBooleanObject':
			'+","+' + name.toUpperCase() + '+ " NUMERIC"'
		case 'EDouble':
			'+","+' + name.toUpperCase() + '+ " REAL"' 
		case 'EDoubleObject':
			'+","+' + name.toUpperCase() + '+ " REAL"'
		case 'EFloat':
			'+","+' + name.toUpperCase() + '+ " REAL"'
		case 'EFloatObject':
			'+","+' + name.toUpperCase() + '+ " REAL"'	
		case 'EByteArray':
			'+","+' + name.toUpperCase() + '+ " BLOB"'	
		default: 
			'+","+' + name.toUpperCase() + '+ " TEXT"'
	}-»
	 «REM»
	 Unsupported Ecore Types:
	 EEList<E>
	 EEnumerator<E>
	 ETreeIterator<E>
	 EInvocationTargetException
	 EResource
	 EResourceSet
	 EMap
	 EFeatureMap
	 EFeatureMapEntry
	 EDiagnosticChain
	 EByteArray
	 EJavaClass
	 Own types
	 EJavaObject
	 «ENDREM»
«ENDDEFINE»

«DEFINE columns FOR EReference»	
	String «name.toUpperCase()» = "«name.toLowerCase()»";
«ENDDEFINE»

«DEFINE database FOR EPackage»
	«FILE getPackagePath(nsURI)+"/database/Database.java"-»
		package «getPackageName(nsURI)».database;
		
		import android.content.Context;
		import android.database.sqlite.SQLiteDatabase;
		import android.database.sqlite.SQLiteOpenHelper;
		
		«FOREACH eClassifiers AS class ITERATOR iter-»
    		import «getPackageName(nsURI)».database.tables.«class.name.toFirstUpper()»Table;
		«ENDFOREACH»
		
		/**
		 * This database class extends the SQLiteOpenHelper
		 * A database file is created: mdsdacpdatabase.db
		 * 
		 * It is possible to implement an own mechanism to store data on database updates:
		 * Write your code inside the defined block inside the "onUpgrade" method!
		 *
		 * More details about sqlite databases in android:
		 * @see <a href="http://developer.android.com/guide/topics/data/data-storage.html#db">Tutorial</a>
		 * @see <a href="http://developer.android.com/reference/android/database/sqlite/SQLiteOpenHelper.html">Reference</a>
		 *
		 * «modifyWarningComment()»
		 */
		public class Database extends SQLiteOpenHelper {
		    private static final String DATABASE_NAME = "mdsdacpdatabase.db";
			private static final int DATABASE_VERSION = «countUp()»;
						
			public Database(final Context context) {
        		super(context, DATABASE_NAME, null, DATABASE_VERSION);
			}
			
			@Override
    		public final void onCreate(final SQLiteDatabase db) {
    			«FOREACH eClassifiers AS class ITERATOR iter-»
    				db.execSQL(«class.name.toFirstUpper()»Table.SQL_CREATE);
				«ENDFOREACH-»
    		}
    		
			@Override
    		public final void onUpgrade(final SQLiteDatabase db, final int oldVersion, final int newVersion) {
    			«PROTECT CSTART "/*" CEND "*/" ID "DatabaseUpdate"» 
	    			
	    			// TODO Implement your database update functionality here and remove the following method call!
	    			onUpgradeDropTablesAndCreate(db);
				
				«ENDPROTECT»
    		}
	    	
	    	/**
	    	 * This basic upgrade functionality will destroy all old data on upgrade
	    	 */    		
    		private final void onUpgradeDropTablesAndCreate(final SQLiteDatabase db) {
    				«FOREACH eClassifiers AS class ITERATOR iter-»
	    				db.execSQL(«class.name.toFirstUpper()»Table.SQL_DROP);
					«ENDFOREACH-»
	        		onCreate(db);
			}   
		}
	«ENDFILE»
«ENDDEFINE»